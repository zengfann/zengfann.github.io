<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://zengfann.github.io/</id><title>zengfan</title><subtitle>愿你有一生的光明与快乐！</subtitle> <updated>2024-02-29T00:34:19+08:00</updated> <author> <name>zengfan</name> <uri>https://zengfann.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://zengfann.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="https://zengfann.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2024 zengfan </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>滑动窗口与哈希表</title><link href="https://zengfann.github.io/posts/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/" rel="alternate" type="text/html" title="滑动窗口与哈希表" /><published>2024-02-28T06:00:00+08:00</published> <updated>2024-02-28T06:00:00+08:00</updated> <id>https://zengfann.github.io/posts/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</id> <content src="https://zengfann.github.io/posts/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/" /> <author> <name>zengfan</name> </author> <category term="Blogging" /> <category term="algorithm" /> <summary> 滑动窗口与哈希表 基本思想 滑动窗口: 即不断的调节目标子序列的起始位置与终止位置，不断与待比较序列比较，从而获得我们想要的结果。 哈希表:哈希表是根据关键码的值而直接进行访问的数据结构。 题目 给定两个字符串s和p，找到s中所有p的异位词的子串，返回这些子串的起始索引。 异位词 指由相同字母重排列形成的字符串（包括相同的字符串）。 示例: 输入: s = “cbaebabacd”, p = “abc” 输出: [0,6] 解释: 起始索引等于 0 的子串是 “cba”, 它是 “abc” 的异位词。 起始索引等于 6 的子串是 “bac”, 它是 “abc” 的异位词。 分析 首先根据Hash表特点。统计序列中数值出现的个数，创建s和p的Hash数组。 将p的Hash数组置于sHash数组初始位置进行长度 length = p.length 长度进行 +... </summary> </entry> <entry><title>快速排序</title><link href="https://zengfann.github.io/posts/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/" rel="alternate" type="text/html" title="快速排序" /><published>2023-12-25T06:00:00+08:00</published> <updated>2023-12-25T06:00:00+08:00</updated> <id>https://zengfann.github.io/posts/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</id> <content src="https://zengfann.github.io/posts/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/" /> <author> <name>zengfan</name> </author> <category term="Blogging" /> <category term="algorithm" /> <summary> 快速排序 基本思想 选择一个基准数，通过一趟排序将要排序的数据分割成独立的两部分；其中一部分的所有数据都比另外一部分的所有数据都要小。然后，再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。 分析 从数列中挑出一个基准值。 将所有比基准值小的摆放在基准前面，所有比基准值大的摆在基准的后面(相同的数可以到任一边)。 在这个分区退出之后，该基准就处于数列的中间位置。递归地把”基准值前面的子数列”和”基准值后面的子数列”进行排序。 算法逻辑 Java 代码 class Solution { public void sortColors(int[] nums) { //排序就行了 int right = nums.length - 1; int left = 0... </summary> </entry> <entry><title>注解学习</title><link href="https://zengfann.github.io/posts/%E6%B3%A8%E8%A7%A3%E7%90%86%E8%A7%A3/" rel="alternate" type="text/html" title="注解学习" /><published>2023-11-23T06:00:00+08:00</published> <updated>2023-11-23T06:00:00+08:00</updated> <id>https://zengfann.github.io/posts/%E6%B3%A8%E8%A7%A3%E7%90%86%E8%A7%A3/</id> <content src="https://zengfann.github.io/posts/%E6%B3%A8%E8%A7%A3%E7%90%86%E8%A7%A3/" /> <author> <name>zengfan</name> </author> <category term="Blogging" /> <category term="spring" /> <summary> 注解学习 @Component 与 @Service 相同 一般注入的时候不写value值。 注入 一般是标记在实现类上(一般类)上，不能注入接口。因为接口不能实例化。 @Autowired 引用 将上述注入到spring容器中的实例获取。 且 一情况下用在 接口层 应为接口都是由实现类 去实现接口。 也可直接引用某个一般类 相当于对改类 直接 new()实例化。 若该接口只有一个实现类 则注解该接口 则直接实例的是这个接口的实现类。 若该接口有多个实现类 则需要通过在 @Autowired 下加 @Qualifier(“ 实现类名称”) 这样才能找到正确的实现类。则根据类型确定是否有相应的实现类。 @Resource 引用 将上述注入到spring容器中的实例获取。 且 一情况下用在 接口层 应为接口都是由实现类 去实现接口。 ... </summary> </entry> <entry><title>二分法</title><link href="https://zengfann.github.io/posts/%E4%BA%8C%E5%88%86%E6%B3%95/" rel="alternate" type="text/html" title="二分法" /><published>2023-09-14T06:00:00+08:00</published> <updated>2023-11-28T22:39:38+08:00</updated> <id>https://zengfann.github.io/posts/%E4%BA%8C%E5%88%86%E6%B3%95/</id> <content src="https://zengfann.github.io/posts/%E4%BA%8C%E5%88%86%E6%B3%95/" /> <author> <name>zengfan</name> </author> <category term="Blogging" /> <category term="algorithm" /> <summary> 二分法 题目 给定一个N个元素有序(升序)整型数组nums和一个目标值target，写一个搜索nums中的target，如果目标值存在，则返回下标，否则返回-1。 示例一 输入: nums = [-1,0,3,5,9,12], target = 9 输出: 4 解释: 9 出现在 nums 中并且下标为 4 示例二 输入: nums = [-1,0,3,5,9,12], target = 2 输出: -1 解释: 2 不存在 nums 中因此返回 -1 分析 首先分析该数组为有序数组且为升序，同时可以判断得出该数组不存在重复的元素。即若存在相同的元素，则可能返回的不是唯一的元素下标。 确定边界条件，即left&amp;lt;=right or left&amp;lt;right。 即保证若采用=，即使为左闭右闭条件，否则采用左边... </summary> </entry> <entry><title>秒速五厘米-宇航员篇(上)</title><link href="https://zengfann.github.io/posts/%E7%A7%92%E4%BA%94-sec/" rel="alternate" type="text/html" title="秒速五厘米-宇航员篇(上)" /><published>2022-11-30T06:00:00+08:00</published> <updated>2022-11-30T06:00:00+08:00</updated> <id>https://zengfann.github.io/posts/%E7%A7%92%E4%BA%94-sec/</id> <content src="https://zengfann.github.io/posts/%E7%A7%92%E4%BA%94-sec/" /> <author> <name>zengfan</name> </author> <category term="Blogging" /> <category term="动漫" /> <summary> 宇航员篇 即使目标遥不可及,仍然选择只身前往这段可能没有结果的旅程。在电影《秒速五厘米》第二话中,孤独与距离贯穿始终。 这篇文章,我们从贵树与明里分别后的时间点开始,结合加纳新太与新海诚两个版本的小说,还原电影之外花苗与贵树的故事。 宇航员篇 初来鹿儿岛 飞远的书信 一见钟情 我想去哪里 二重惑星 你是谁 初来鹿儿岛 和明里分别没多久,贵树便从东京搬去鹿儿岛县的种子岛,转入了南种子中学。经历过多次转学,应该采取怎么样的举动,贵树已经是轻车熟路。 虽然不能太过显眼,但也不能不做声。另外,还要在做自我介绍的时候不显露一丝的敌意。 这是贵树在十四岁便能意识到事,我叫远野贵树,虽然因为父母工作的原因,已对转学习以为常。不过还没有适应这个岛上的生活,还请大家多多关照。而花苗从看到贵树的那一瞬间开始,已经坠入了命运般的暗恋中。 同样初中年纪的... </summary> </entry> </feed>
