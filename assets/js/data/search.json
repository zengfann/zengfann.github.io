[ { "title": "滑动窗口与哈希表", "url": "/posts/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/", "categories": "Blogging, algorithm", "tags": "Java, Go, C++", "date": "2024-02-28 06:00:00 +0800", "snippet": "滑动窗口与哈希表基本思想滑动窗口: 即不断的调节目标子序列的起始位置与终止位置，不断与待比较序列比较，从而获得我们想要的结果。哈希表:哈希表是根据关键码的值而直接进行访问的数据结构。题目给定两个字符串s和p，找到s中所有p的异位词的子串，返回这些子串的起始索引。异位词 指由相同字母重排列形成的字符串（包括相同的字符串）。示例:输入: s = “cbaebabacd”, p = “abc”输出: [0,6]解释:起始索引等于 0 的子串是 “cba”, 它是 “abc” 的异位词。起始索引等于 6 的子串是 “bac”, 它是 “abc” 的异位词。分析 首先根据Hash表特点。统计序列中数值出现的个数，创建s和p的Hash数组。 将p的Hash数组置于sHash数组初始位置进行长度 length = p.length 长度进行 +1 向右移动。 每次移动 +1 则比较此时两个Hsah数组是否相等，若相等则将左边界记录。 注意每次 +1 移动，则左边也会移动，同时将sHash数组进行Hash数组对应数值 -1。Java 代码 class Solution { public List&lt;Integer&gt; findAnagrams(String s, String p) { int sLen = s.length(),pLen = p.length(); //即s小于则无法存在异位数 if(sLen &lt; pLen){ return new ArrayList&lt;Integer&gt;(); } List&lt;Integer&gt; res = new ArrayList&lt;Integer&gt;(); //构建两个滑动hash数组 int[] sArry = new int[26]; int[] pArry = new int[26]; // 将活动数组放到s初始位置 即只会统计以plen为长度的hash for(int i = 0; i &lt; pLen;i++){ sArry[s.charAt(i) - 'a']++; pArry[p.charAt(i) - 'a']++; } //判断s从i=0开始的hash数组是否相等 if(Arrays.equals(sArry,pArry)){ res.add(0); } //开始做滑动判断 for(int i = 0 ;i &lt; sLen - pLen; i++){ //slen - plen 为截止 即大于位置 则后续的长度是小于plen 是不可能存在p的异位字符 //滑动窗口右边界移动 sArry[s.charAt(i+pLen) - 'a']++; //左边界移动 即需要将移动后的记录-1 sArry[s.charAt(i) - 'a']--; //如果相等 则将左边界添加到结果数组 if(Arrays.equals(sArry,pArry)){ res.add(i+1); } } return res; }}题目推荐 找到字符串中所有字母异位词 长度最小的子数组" }, { "title": "快速排序", "url": "/posts/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/", "categories": "Blogging, algorithm", "tags": "Java, Go, C++", "date": "2023-12-25 06:00:00 +0800", "snippet": "快速排序基本思想选择一个基准数，通过一趟排序将要排序的数据分割成独立的两部分；其中一部分的所有数据都比另外一部分的所有数据都要小。然后，再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。分析 从数列中挑出一个基准值。 将所有比基准值小的摆放在基准前面，所有比基准值大的摆在基准的后面(相同的数可以到任一边)。 在这个分区退出之后，该基准就处于数列的中间位置。递归地把”基准值前面的子数列”和”基准值后面的子数列”进行排序。算法逻辑Java 代码 class Solution { public void sortColors(int[] nums) { //排序就行了 int right = nums.length - 1; int left = 0; //首先以第一次快排返回第一个基本数的下标 quickSort(nums,0,nums.length -1); } public static void quickSort(int[] nums,int left,int right){ if(left &lt; right){ //获取每次快速排序后基数的下标pos int pos = partition(nums,left,right); //遍历左边的所有数据 quickSort(nums,left,pos-1); //遍历右边的所有的数据 quickSort(nums,pos+1,right); } } public static int partition(int[] nums, int left, int right){ //记下每次快排的基数 与记录当前i; int pivot = nums[left]; int i = left; //记录左边界的下一个值 如果下一个值小于基数 则利用i进行替换 for(int j = left +1;j &lt;= right;j++){ if(nums[j] &lt;= pivot){ i++; int temp = nums[i]; nums[i] = nums[j]; nums[j] = temp; } } // 完成后需要将基数放到正确的i值上即进行替换 int temp = nums[i]; nums[i] = nums[left]; nums[left] = temp; // 返回基准元素的索引 return i; } }题目推荐" }, { "title": "注解学习", "url": "/posts/%E6%B3%A8%E8%A7%A3%E7%90%86%E8%A7%A3/", "categories": "Blogging, spring", "tags": "Java, Go, Spring", "date": "2023-11-23 06:00:00 +0800", "snippet": "注解学习@Component 与 @Service 相同 一般注入的时候不写value值。 注入 一般是标记在实现类上(一般类)上，不能注入接口。因为接口不能实例化。@Autowired 引用 将上述注入到spring容器中的实例获取。 且 一情况下用在 接口层 应为接口都是由实现类 去实现接口。 也可直接引用某个一般类 相当于对改类 直接 new()实例化。 若该接口只有一个实现类 则注解该接口 则直接实例的是这个接口的实现类。 若该接口有多个实现类 则需要通过在 @Autowired 下加 @Qualifier(“ 实现类名称”) 这样才能找到正确的实现类。则根据类型确定是否有相应的实现类。@Resource 引用 将上述注入到spring容器中的实例获取。 且 一情况下用在 接口层 应为接口都是由实现类 去实现接口。 也可直接引用某个一般类 相当于对改类直接 new()实例化。 若该接口只有一个实现类 则注解该接口，则直接实例的是这个接口的实现类。 若该接口有多个实现类 则需要通过在 @Resource（name = “ 实现类名称”）这样才能找到正确的实现类。即根据名称找，再根据实现类。Java 代码总结针对多个实现类的接口无论是@Autowired or @Resource 都要说明要引用的是哪个实现类，当然也可以使用工厂模式实现对实现列问题。如果想实现对于多实现类的调用，最为简单的则是利用@Resource(name = “实现类名称”)。参考博客： https://www.cnblogs.com/aland-1415/p/11991170.html https://juejin.cn/post/7134940044179013668" }, { "title": "二分法", "url": "/posts/%E4%BA%8C%E5%88%86%E6%B3%95/", "categories": "Blogging, algorithm", "tags": "Java, Go, C++", "date": "2023-09-14 06:00:00 +0800", "snippet": "二分法题目给定一个N个元素有序(升序)整型数组nums和一个目标值target，写一个搜索nums中的target，如果目标值存在，则返回下标，否则返回-1。示例一 输入: nums = [-1,0,3,5,9,12], target = 9 输出: 4 解释: 9 出现在 nums 中并且下标为 4示例二 输入: nums = [-1,0,3,5,9,12], target = 2 输出: -1 解释: 2 不存在 nums 中因此返回 -1分析 首先分析该数组为有序数组且为升序，同时可以判断得出该数组不存在重复的元素。即若存在相同的元素，则可能返回的不是唯一的元素下标。 确定边界条件，即left&lt;=right or left&lt;right。 即保证若采用=，即使为左闭右闭条件，否则采用左边闭合右边开的条件。 首先确定选择的类型 建议选择left&lt;right类型，避免出现left = right 的无效空间。算法逻辑 首先确定 left = 0 与 right = nums.length; 确定循环边界while(left &lt; right),每次循环确定mid = left + ((right - left) &gt;&gt; 1) 遍历nums[mid] 与 target 的大小，若&gt; 则left = mid + 1;否则 right = mid;相等则返回mid。Java 代码采用left&lt;=right边界条件 public int search(int[] nums,int target){ //左边闭合与右边闭合时 right 取nums.length - 1 if(target &lt; nums[0] || target &gt; nums[nums.length - 1 ]){ return -1; } int left = 0; int right = nums.length-1; while (left &lt;= right){ //获取当前数组的中间mid int mid = left + ((right - left) &gt;&gt; 1); if(nums[mid] == target){ return mid; } else if (nums[mid] &lt; target) { left = mid + 1; } else if (nums[mid] &gt; target) { right = mid - 1; } } return -1; }采用left&lt;right边界条件 public int search_2(int[] nums,int target){ //左边闭合且右边开时 right = nums.length 这种情况下不会出现right = left情况 int left = 0, right = nums.length; while (left &lt; right) { int mid = left + ((right - left) &gt;&gt; 1); if (nums[mid] == target) return mid; else if (nums[mid] &lt; target) left = mid + 1; else if (nums[mid] &gt; target) right = mid; } return -1; }题目推荐 搜索插入位置 在排序数组中查找元素的第一个和最后一个位置" }, { "title": "秒速五厘米-宇航员篇(上)", "url": "/posts/%E7%A7%92%E4%BA%94-sec/", "categories": "Blogging, 动漫", "tags": "浪漫, 樱花", "date": "2022-11-30 06:00:00 +0800", "snippet": "宇航员篇即使目标遥不可及,仍然选择只身前往这段可能没有结果的旅程。在电影《秒速五厘米》第二话中,孤独与距离贯穿始终。这篇文章,我们从贵树与明里分别后的时间点开始,结合加纳新太与新海诚两个版本的小说,还原电影之外花苗与贵树的故事。 宇航员篇 初来鹿儿岛 飞远的书信 一见钟情 我想去哪里 二重惑星 你是谁初来鹿儿岛和明里分别没多久,贵树便从东京搬去鹿儿岛县的种子岛,转入了南种子中学。经历过多次转学,应该采取怎么样的举动,贵树已经是轻车熟路。虽然不能太过显眼,但也不能不做声。另外,还要在做自我介绍的时候不显露一丝的敌意。这是贵树在十四岁便能意识到事,我叫远野贵树,虽然因为父母工作的原因,已对转学习以为常。不过还没有适应这个岛上的生活,还请大家多多关照。而花苗从看到贵树的那一瞬间开始,已经坠入了命运般的暗恋中。同样初中年纪的他,为什么能像这样,站在大家面前毫不紧张的说话呢。之前究竟过着什么样的生活,心中到底有着什么。如此强烈的渴望得到答案,在他人生中还是第一次。来到种子岛,贵树最先去的便是宇宙中心。他一边面向蓝天,一边想象火箭升空的情景。可是关于火箭向着何种方向以何种方式飞行,她无法想象出来。他也常踩着自行车去观光其他地方,将岛上很多风景,都转化成了自己某种情感。飞远的书信贵树将在新的地方开始的新生活写成信封,寄给明里。他们都非常努力的维持着彼此之间的联系,但贵树渐渐意识到书信往来一定无法长久。跟樱花树下的体验与真实感比起来,语言这种工具,精准度低到骇人的地步。贵树一直在信中,寻求那次压倒性的体验的残渣。但长期的一无所获也让他有些疲劳。收到明里的来信,他仍会十分欣喜,但同时都会伴随着微小的无力感。再这样下去,或许我们努力通过书信,获取某种共有感触的信念也会逐渐泯灭吧。互通的书信在不知不觉之中,已经失去了背后的厚重。变成了单纯写满文字的纸张,再往后双方都默认不再书信。贵树对此甚至感受到某种意义上的解脱,从前那份暂时的安心感已然逝去。贵树体内仅存的明里的碎片,被现实的浓郁色彩填涂的一干二净。在贵树内心潜留下来的是从今往后,再也不会期盼被人理解的空虚感。一见钟情花苗的人生同样发生着改变,对贵树的一见钟情。让她无论在镇上、学校里都会远远的望着贵树,并努力在合适的时机找他交谈。 但把洞察力放到新环境的贵树,对这份感情没有丝毫察觉。贵树的成绩很好,因此花苗拼命的用功,最终和贵树考上了同一所高中。在高中一年级,花苗受姐姐的影响开始玩浮板。从开始的那一天起,她就被冲浪的魅力深深吸引。尽管不明白走向海洋这种行为的意义,但她认为这是很美好的事。 贵树对花苗的再发现,是在海岸的一次相遇。她正抽着香烟,呆呆的眺望着大海。大海很远处,可以模糊的看见一个正趴在单人板上,奋力滑动手臂的人,拼命的逆波前行。却总是被海浪返推回来。不知为何,那副不屈不挠的姿态打动了贵树的心。原本也应该像那人一样锲而不舍,但自己却感觉十分疲惫。过了一会,他突然察觉到那人是澄田花苗,跟自己高中班级相隔两个教室的初中同学。贵树就一直看着花苗重复这个过程,等花苗回到海滩上。终于察觉到他的存在,向他走来并排而做。贵树将自己的目光,尽力从花苗修长的细腿移到浪花上。和花苗说到：冲浪这种运动,还真是美丽呢。甚至会骚动人心。虽然乘风破浪的时候心情会非常高兴,但是向着闪闪发光的大海划去的感觉,在我看来也十分的不错。嗯,我也最喜欢面向大海时的心情。想要抓住那一瞬间的紧张感？没错,就是那种感觉。远野君,为什么总能说出这么恰当的言语啊？要是平时也能,多说一些话就好了。我在说啊,一直都。但是远野君给人的印象就是那样,即使是在跟朋友聊天,就算是有想要说的话,给人感觉也只会说出一半。是这样吗？贵树转开了话题,花苗这句话非常精准的射中了他的要害。或许他确实有这种奇怪的自我意识,但被花苗这种在学校不太显眼,跟自己也没有太多交集的女生。一针见血的评论不是。他倍感冲击,以此为契机,花苗在贵树心中的地位,发生了些许变化。他邀请花苗一起前往便利店,两人坐在店门口的长椅闲聊。花苗向骑自行车上学的贵树推荐了摩托。那日之后,贵树与花苗亲近了不少,如若在学校的走廊上遇见,两人都会以抬手或互相对视的方式打招呼。要是身边没有其他朋友的话,会停下脚步稍微小聊几句,少有的几次会配合对方的时间,骑着摩托车一起回家。但是他俩的关系仅限于此,贵树偶尔会在学校看见花苗非常愉快的跟朋友们聊天。他觉得那样的她才极具魅力,可与自己聊天时的花苗,总会有一些紧张。虽然这么说有些自我陶醉,但她也许是喜欢上我了吧贵树这么认为,但他跟倾向于不让任何特别的事情发生在自己身上,所以他只好装作什么都不知道。索性将问题全部向后推,即便如此,贵树仍对花苗抱有一丝朴素的好感,他在她身上找到久违的感触。我想去哪里贵树的父亲在这里的工作进行的十分顺利,他常常无意识的嘟囔出这句话。我想去哪里？等他回过神都会十分愕然,自己对住所的移动竟有着期盼,就这件事情他考虑了很久。也许是渐渐安定于此的自己在焦虑,“想去哪里？”这句话中就包含了想回到哪里的纤细之情。可是自己该去哪呢？贵树想起了时隔许久的明里,但是他从未想过那个没有明里的小镇会是自己的归处。二重惑星之后贵树梦见了那个梦境,天空的颜色并不均匀,像洗了绘画工具的池水。有两只小鸟横向飞过,耳边传来风的声音,踏着柔软的草地。两个人影并排行走着,两个人中的一人是自己,另一个是无法辨认模样的女生,形似蜻蜓的虫子,一边飞行一边发出震动翅膀的声音。两人遥望天空,看到一个被推出地平线的,苍白色的完整的巨大圆球。贵树知道这是二重惑星,他和她,就站在手拉手相互围绕彼此旋转的双子之上,接着太阳出来了。因为阳光太过耀眼,贵树移开了视线,目光落在了女生的身上,强风吹过,他的秀发凌乱的飘散着。依然注视着行星与太阳的玩美二重奏,白色的太阳突然燃烧的通红,晕染出一道火焰般的橙色光芒。你是谁当日清晨,明明不是晨练的日子。树却来到了弓道场,站在射击的位置上,这时太阳的光线已经照射到脚边。 虽然种子岛升起的朝阳的光线也很赤红,但与他梦境里的光线相比,依然显得十分淡泊。那个梦境中有贵树所追求的一切,我想要的绝对无以言表的世界,通过想象,生硬的雕刻了出来。为了不遗忘梦境,练习完后,贵树掏出手机。打开邮件编辑起来,也从这时开始,他养成了用手机做记录的习惯。突然他极其自然的加了一句。你是谁？这一瞬,他意识到,这是为了传达给谁而写下的记录。而这些内容一定是除了这个人之外,再无人可以明白的东西。我到底想传达给谁？我到底想传达些什么？就连贵树自己也不清楚。他按住取消键,融掉了刚才键入的记录。虽然他很想念筱原明里,但仅限想念而已。他的眼前是现实的日常生活,但是他常常会感觉似乎有谁的身影、谁的气息,正在稍远的地方望着自己。当贵树突然回头,注视没有任何物体的后方时,身旁的花苗都感到诧异。她能够察觉,贵树与周围环境之间,隔着一层类似薄膜的东西。在自己独处之时,贵树常常会向那个身影发问你是谁？" }, { "title": "秒速五厘米-樱花抄", "url": "/posts/%E7%A7%92%E4%BA%94-one/", "categories": "Blogging, 动漫", "tags": "浪漫, 樱花", "date": "2022-10-23 06:00:00 +0800", "snippet": "樱花抄 普通少男少女春心的悸动,对关系的羞涩、对喜欢的人承诺、对爱而不得的惆怅、总有一丝能勾起软弱的内心。秒速五厘米是一个浪漫的标题,是带着整整刺痛的青春。本篇文章我们将以该作品的动画电影为基础 以小说内容为补充。 樱花抄 童年的相识 书信往来 电车赴约 交心后的分离童年的相识从明里的视角,讲诉发生在画面外的故事。贵树与明里的人生轨迹与同龄的孩子多不相同,他们都随着父母工作的脚步不停转校。总是刚刚熟悉就被迫再次面对全新的环境,对尚年幼的小孩来说,这无疑是种折磨。身为男孩的贵树找到了保护自己的方式: 他会在他人的面前嬉闹玩耍,甚至突然做出一些意气用事的事情,目的就是为了确保自己在儿童社会中的容身之地。 虽然他并未很好的融入周围,但他会非常用心地尽量将其掩饰起来。 通过这一方式,他持续维护着对自己而言非常重要的东西。 但内心羞涩的明里却每日面对着无法言诉的痛苦:不管转多少次校,带给我的总是恐怖。新的地方与陌生的人们都无法令我感到高兴。与我差别巨大的语调,每个地方不同的人际关系、陌生的建筑、陌生的人、班上同学除我之外都是相识等等,这些不公平的状态使我存粹地感到恐怖。直到她转学到了贵树所在的班级,贵树对她说了一句简简单单的“别紧张，没关系”,奇迹般地舒缓了明里的心情,也拉近了两人之间的距离。很快相同的转校经历,同样的读书爱好,让贵树与明里成为无话不谈,相依相伴的好朋友。他们一起去摸小道边缘的两只小猫,一起通过阅读了解彼此,一起看阳光下树荫斑驳的影子,一起共进晚餐时讨论感兴趣的话题。 渐渐的贵树与明里变得形影不离,这招来了其他同学得戏弄。午休时分,趁着贵树不在班里, 同学们一边嘲笑着明里。一边画着粉笔画,厚重得恶意让她喘不过气来。贵树出现了他用力擦了擦黑板,模糊了插画,紧握住明里的收带她逃出教室,在学校的走廊里轻快地奔跑。 我当时感受到的只有解放感与紧握住我右手的贵树君的那份坚强。我感觉有某种东西从他的手心散发出来,渐渐流入我的身体,让我变得越发轻快。就在此时,我才清晰的意识到,我喜欢贵树君。那是第一次跟贵树君牵手,我多么想就这样一直牵着他的手,不再分开。日语：樱花花瓣飘落的速度,秒速是五厘米。这是明里小时候看的,少年向科学杂志书页边缘的一句话。在和贵树放学的路上,明里突然又回想了起来。秒速五厘米,我想着大概是我无意识所发出的委婉的爱的话语。换言之，我跟贵树君在一起也是一件非常自然的事情 我希望我们能够永远像当下这样在一起。放学路上,明里奔跑在宛如樱花隧道的坡道上。贵树在后面追逐明里享受着被喜欢之人追上的过程,她快速地跑到铁路对面, 栅栏隔开了两人的距离。她撑开伞转了个圈对对贵树说道,明年要是也能在一起看樱花该多好。然而伴随着轰鸣声的电车挡在了他们中间,也挡住了明里未说出口的下一句话。不只是明年,还有后年、大后年、直到永远。他们再也没有机会看一起看樱花,明里的再一次转学掐断了两人的交往。 因为没能完成和贵树上同一所中学的约定,明里不敢和贵树联系,她只能将无法言表的心情,坦率的告诉自己幻想出来的贵树。书信往来在转学的半年后,明里终于开始将给贵树写信的想法付诸行动,正如贵树在看到明里的信件后所想的那般。不知为何,我从信里所想象到的明里,总是孤零零一个人。 在新的学校,明里并不适应环境。和贵树的手写信,让她的生活轻松了许多。两个人保持着一月一次的书信往来,但是到初二的时候,贵树也要转学。两个人的距离再次被拉远,贵树做了一个重要的决定。他要去见明里一面,放学后,贵树按照约定乘坐电车前往岩舟车站。但下雪的缘故,电车发生了晚点停运,时间缓缓流逝。不安的情绪难以传递,长时间的等待,遥远的距离感。明里触电般地明白,贵树接到自己要转学电话时的心情。他也会悲伤、会寂寞、会不安。我日思夜想,每天都想和你在一起。这明明是我的肺腑之言,可当时的我为何没能说出口呢？只要将它说出来,他或许就会安心。当时他或许正在烦恼明里就要走了,这个事实,可我为什么会冒昧地对他说。我们就此永别吧,这样不经过大脑的话呢？借助被时间麻痹的大脑,明里毫无掩饰的在信纸上,写下自己想说的话。要是他来了,我就把这封信给他! 电车赴约贵树到达时已是深夜,他们在一起吃了明里做的便当。然后去信里谈论过的地方看樱花树,大学覆盖了樱花树,连此时的雪花都变得像樱花一样美好。他们在树下接吻,紧紧的相拥在一起。我和他的面前都有着一个巨大的人生等待着我们。在这个忙碌的时间中,我清楚的明白那个完美的瞬间已无法再度出现。我明白,我们将来无法在一起。我们已经到达完美,不可能向上越。 我知道,我们正在思考同一件事情。 嘴唇相互重叠的感触,带给明里经不住的悲伤。他们在房间里裹着毛毯聊到深夜,直到困倦地睡着。交心后的分离天亮后两人在车站告别,想起昨晚接吻的那一瞬。她并没有掏出,在车站等贵树写下的那封信。那时产生的强烈感情并不是信能书写下的, 她不想留下那么一个劣化的回忆。即便如此她还有一句,不管怎样都想说出口的话。 贵树君今后一定会一帆风顺的,一定...这也是我希望别人对我说的一句话。我讲这句话告诉了眼前的另一个我，同时告诉了自己。贵树君不顾大雪来到这里，我的思绪也因此有了某种变化。虽然这种变化无法言语，但它确确实实地发生着。在见到贵树君的那一瞬，我发现体内因生存而聚集的紧绷的恐惧感竟然顿时烟消云散了。明里注视着早已不见踪迹的电车的方向,眼前的一切似乎都是贵树已经不在了的表象。 但是明里却拥有了今后也能生活下去的实感。即便这里只剩我一个人,我也依旧可可以生存下去,所以明里决定在下次与贵树见面为止 一定要让自己 变得更坚强。" }, { "title": "Git-Learn", "url": "/posts/Git-Learn/", "categories": "Blogging, Learn", "tags": "Git, Learn", "date": "2022-10-23 06:00:00 +0800", "snippet": "Git-Learn 介绍 文件系统 存储原理 存储过程 提交与分支 常见指令 介绍 Git 是一个免费的、开源、采用按照内容进行寻址的分布式版本控制系统，可快速高效的处理各种项目。 文件系统 工作区(本地文件)：指的是项目代码存放的文件位置。 暂存区：通过git add. 将代码存放到“暂存区”,使得git能追踪到修改记录。 本地库：git commit -m “xx” 将暂存区中的代码提交到“本地仓库“,生成一个本地版本。注意版本内容不可用通过Git指令修改与删除。 远程库：git push将本地仓库推送到远程仓库。 暂存区与本地仓库并不是实际存在代码仓库，即代码量并不会增加，只是将每行代码的操作与内容进行索引标记，从而实现版本控制存储原理 计算文件校验值 Git通过SHA-1(一种散列算法，将任意的二进制数据转化为40个十六进制数组组成的哈希值),为文件的唯一校验值,例如：ffb60d67c2076b21653afe7ff04f43d77ccdd620 文件的校验值前2位作为文件的目录,后38位作为文件名,存储到相应文件位置。存储过程 在任意文件下,新建Test文件。利用vscode(需要在vscode下配置git指令)打开当前空文件夹，git init初始化一个本地.git仓库。 新建一个A.md文件,在文本中输入hello world！使用git add A.md加入到暂存区中。通过git hash-object A.md确定生成的hash值。 可以在文件bojects下发现存在相应的文件目录与文件。同时执行git cat-file -p bc7774a7b18deb1d7bd0212d34246a9b1260ae17会执行该文件，输出hello world! 上述的操作完成了一个文件的存储即我们称之为blob对象。而blob对象存储的只是文件的内容，但并未存储文件名称。因此我们需要另一种类型的对象，来保存文件名与文件之间的关联关系，形成一种树状结构。 Tree对象本身无法通过git add 直接添加，而是由git系统自动生成，用于维护blob对象，即普通文件。在本地创建一个test文件夹，并创建B.md文档。 通过git commit -m “first commit” 产生一下的文件。产生了一个新版本，且生成如下的文件结构。其中af为提交对象的哈希值，执行该问价产生了根目录80的哈希值且为Tree结构。同时执行该哈希值，产生的是该目录下test目录aa与A.md文件bc的hash值为Tree与blob对象类型。即最后c5为B.md文件的hash值。 总结：git通过tree对象来存储目录层级关系及文件校验值，通过文件校验值来访问blob对象，再通过blob对象存储文件内容。提交与分支 通过上诉的操作,我们可以了解到相关概念即 blob对象-&gt;实际文件内容 Tree对象-&gt;文件目录 提交对象-&gt;包含提交人、父提交对象地址、提交信息等内容还包含一个Tree对象。且该对象为项目的梗目录对象，可以根据该根目录逐级获取到各个文件的校验值地址，获取到所有的文件。 通过checkout – b 指令创建一个test2分支，且查询相关信息。打开refs下heads文件发现两个分支的hsah值相同，因为test2分支保存的上一次commit的提交对象。故可理解为每个分支中的hsah值均是再当前分支下最新的commit 提交对象。 总结：分支对象只是一个引用，一个指针，通过校验值指向某个提交对象。在git中，创建任何分支几乎没有任何代价，只是创建了一个40字节的文件，这位Git的灵活的分支机制提供了基础。常见指令git init 初始化本地库,即创建一个文件使得该文件成为本地仓库git status查询当前仓库状态git add . 将修改的代码放到暂存区,且可以使用 git restore –staged将暂存区的代码删除掉git commit -m 切记每次commit 到本地仓库，为一个版本。" }, { "title": "Iphone 美区账号免费获取", "url": "/posts/IPhone-Us-_count-for_free/", "categories": "Blogging, Life", "tags": "Iphone, US Account", "date": "2022-09-22 16:32:00 +0800", "snippet": "最近本来打算下载一些Iphone软件，但是需要美区的账号。本想到某宝购买一个账号，但害怕后续账号被盗。于是在网上找了相关教程注册了一个属于自己的美区账号(其实是不舍得Money),且能通过设置进行登录的账号。注册步骤(以下都是在开代理的前提下，建议HK或者USA) 注册步骤(以下都是在开代理的前提下，建议HK或者USA) 打开美国官网 注册入口 填写注册信息 验证手机号与邮箱 登录新账号 填写地址信息打开美国官网前往[苹果美国官网]www.apple.com,注意网址没有cn。 注意：在使用中国大陆网络下，即使地区改成美国，页面顶部可能依然是“中国大陆”的提示,不要点继续，否则会切回中国大陆地区的页面。可以通过页面最右下角确定是否为”United States”。 注册入口 找到登录(Sign In)账户的地方：点击右上角”购物车“，选择sign in。 此时还没有新账号，需要注册新账号，选择提示连接Create yours now。填写注册信息 姓与名可以随便填，但是只能使用英文字母 COUNTRY/REGION(国家和地区) 一定要选择United States（美国）。 出生日期：格式是：月/日/年，不要乱填，一定要能记住，可以不填真实的，今后多个设备登录时候要验证。 邮箱：要填未注册过苹果ID的邮箱。建议使用Google邮箱或者Microsoft邮箱。 密码（要记得住哦） 电话（重要）：必须填写有效的手机号。可以使用大陆地区的号码！ 今后登录ID、购买服务、下载app、找回账号等等都需要接收验证码。如果使用大陆地区的号码，请将电话所属地/国改成 ”+86 China” 。 Verify with（验证方式）：选择Text message（短信验证） 输入验证码 → Continue (继续)，然后分别输入邮箱验证码和手机验证码。验证手机号与邮箱 去填写的邮箱填写验证码 验证手机号登录新账号 打开设置，登录新注册的账户ID，首次登陆需要输入验证码。 右上角的头像 → 输入账号、密码 → 输入手机验证码 → Review（激活） 勾选Agree to Terms and Conditions（同意隐私与条款”）→ 地区必须是 United States（美国）→ Next（下一步）。填写地址信息:warning:填写美国有效地址：（重要！） 地址、电话一定自己查找，如果大家都用一样的，账户很容易被封。重复的地址会被封号！ 填写时，不要出现汉字哦 :book:地址查找方法： 谷歌/苹果地图找一个Oregon州的星巴克地址，搜索“starbucks in Oregon USA”。(由于美国州税率各州不同，建议生成以下五个免税州的地址以减少价格。它们分别是阿拉斯加州（Alaska）、特拉华州（Delaware）、蒙大拿州（Montana）、新罕布什尔州（New Hampshire）和俄勒冈州（Oregon）。) 可以借助“美国地址生成器https://www.meiguodizhi.com/ 将生成的地址，复制粘贴，按照下图依次填入 Phone（电话）:此处的电话必须是美国的号码。这个号码是购买苹果产品的时候用来接收快递电话的，因为在中国无法购买美国的苹果实体产品。所以此电话不重要，可以随便填（按照地址生成出来的电话也可以）。 示例地址： 1839 Molalla Ave（街道）, Oregon City（城市）, OR（州） 97045（邮编） 示例电话： 4083301234 地址、电话一定自己查找，如果大家都用一样的，账户很容易被封。重复的地址会被封号！已经完成美区苹果ID注册，记住自己的账号与密码！" }, { "title": "Enable Google Page Views", "url": "/posts/enable-google-pv/", "categories": "Blogging, Tutorial", "tags": "google analytics, pageviews", "date": "2021-01-04 07:32:00 +0800", "snippet": "This post is to enable Page Views on the Chirpy theme based blog that you just built. This requires technical knowledge and it’s recommended to keep the google_analytics.pv.* empty unless you have a good reason. If your website has low traffic, the page views count would discourage you to write more blogs. With that said, let’s start with the setup.Set up Google AnalyticsCreate GA account and propertyFirst, you need to set up your account on Google analytics. While you create your account, you must create your first Property as well. Head to https://analytics.google.com/ and click on Start Measuring Enter your desired Account Name and choose the desired checkboxes Enter your desired Property Name. This is the name of the tracker project that appears on your Google Analytics dashboard Enter the required information About your business Hit Create and accept any license popup to set up your Google Analytics account and create your propertyCreate Data StreamWith your property created, you now need to set up Data Stream to track your blog traffic. After you signup, the prompt should automatically take you to create your first Data Stream. If not, follow these steps: Go to Admin on the left column Select the desired property from the drop-down on the second column Click on Data Streams Add a stream and click on Web Enter your blog’s URLIt should look like this:Now, click on the new data stream and grab the Measurement ID. It should look something like G-V6XXXXXXXX. Copy this to your _config.yml file:google_analytics: id: 'G-V6XXXXXXX' # fill in your Google Analytics ID # Google Analytics pageviews report settings pv: proxy_endpoint: # fill in the Google Analytics superProxy endpoint of Google App Engine cache_path: # the local PV cache data, friendly to visitors from GFW regionWhen you push these changes to your blog, you should start seeing the traffic on your Google Analytics. Play around with the Google Analytics dashboard to get familiar with the options available as it takes like 5 mins to pick up your changes. You should now be able to monitor your traffic in real time.Setup Page ViewsThere is a detailed tutorial available to set up Google Analytics superProxy. But, if you are interested to just quickly get your Chirpy-based blog display page views, follow along. These steps were tested on a Linux machine. If you are running Windows, you can use the Git bash terminal to run Unix-like commands.Setup Google App Engine Visit https://console.cloud.google.com/appengine Click on Create Application Click on Create Project Enter the name and choose the data center close to you Select Python language and Standard environment Enable billing account. Yeah, you have to link your credit card. But, you won’t be billed unless you exceed your free quota. For a simple blog, the free quota is more than sufficient. Go to your App Engine dashboard on your browser and select API &amp; Services from the left navigation menu Click on Enable APIs and Services button on the top Enable the following APIs: Google Analytics API On the left, Click on OAuth Consent Screen and accept Configure Consent Screen. Select External since your blog is probably hosted for the public. Click on Publish under Publishing Status Click on Credentials on the left and create a new OAuth Client IDs credential. Make sure to add an entry under Authorized redirect URIs that matches: https://&lt;project-id&gt;.&lt;region&gt;.r.appspot.com/admin/auth Note down the Your Client ID and Your Client Secret. You’ll need this in the next section. Download and install the cloud SDK for your platform: https://cloud.google.com/sdk/docs/quickstart Run the following commands: [root@bc96abf71ef8 /]# gcloud init~snip~Go to the following link in your browser: https://accounts.google.com/o/oauth2/auth?response_type=code&amp;client_id=XYZ.apps.googleusercontent.com&amp;redirect_uri=ABCDEFGEnter verification code: &lt;VERIFICATION CODE THAT YOU GET AFTER YOU VISIT AND AUTHENTICATE FROM THE ABOVE LINK&gt;You are logged in as: [blah_blah@gmail.com].Pick cloud project to use:[1] chirpy-test-300716[2] Create a new projectPlease enter numeric choice or text value (must exactly match listitem): 1[root@bc96abf71ef8 /]# gcloud info# Your selected project info should be displayed here Setup Google Analytics superProxy Clone the Google Analytics superProxy project on Github: https://github.com/googleanalytics/google-analytics-super-proxy to your local. Remove the first 2 lines in the src/app.yaml file: - application: your-project-id- version: 1 In src/config.py, add the OAUTH_CLIENT_ID and OAUTH_CLIENT_SECRET that you gathered from your App Engine Dashboard. Enter any random key for XSRF_KEY, your config.py should look similar to this #!/usr/bin/python2.7__author__ = 'pete.frisella@gmail.com (Pete Frisella)'# OAuth 2.0 Client SettingsAUTH_CONFIG = { 'OAUTH_CLIENT_ID': 'YOUR_CLIENT_ID', 'OAUTH_CLIENT_SECRET': 'YOUR_CLIENT_SECRET', 'OAUTH_REDIRECT_URI': '%s%s' % ( 'https://chirpy-test-XXXXXX.ue.r.appspot.com', '/admin/auth' )}# XSRF SettingsXSRF_KEY = 'OnceUponATimeThereLivedALegend' You can configure a custom domain instead of https://PROJECT_ID.REGION_ID.r.appspot.com.But, for the sake of keeping it simple, we will be using the Google provided default URL. From inside the src/ directory, deploy the app [root@bc96abf71ef8 src]# gcloud app deployServices to deploy:descriptor: [/tmp/google-analytics-super-proxy/src/app.yaml]source: [/tmp/google-analytics-super-proxy/src]target project: [chirpy-test-XXXX]target service: [default]target version: [VESRION_NUM]target url: [https://chirpy-test-XXXX.ue.r.appspot.com]Do you want to continue (Y/n)? YBeginning deployment of service [default]...╔════════════════════════════════════════════════════════════╗╠═ Uploading 1 file to Google Cloud Storage ═╣╚════════════════════════════════════════════════════════════╝File upload done.Updating service [default]...done.Setting traffic split for service [default]...done.Deployed service [default] to [https://chirpy-test-XXXX.ue.r.appspot.com]You can stream logs from the command line by running:$ gcloud app logs tail -s defaultTo view your application in the web browser run:$ gcloud app browse Visit the deployed service. Add a /admin to the end of the URL. Click on Authorize Users and make sure to add yourself as a managed user. If you get any errors, please Google it. The errors are self-explanatory and should be easy to fix. If everything went good, you’ll get this screen:Create Google Analytics QueryHead to https://PROJECT_ID.REGION_ID.r.appspot.com/admin and create a query after verifying the account. GA Core Reporting API query request can be created in Query Explorer.The query parameters are as follows: start-date: fill in the first day of blog posting end-date: fill in today (this is a parameter supported by GA Report, which means that it will always end according to the current query date) metrics: select ga:pageviews dimensions: select ga:pagePathIn order to reduce the returned results and reduce the network bandwidth, we add custom filtering rules 1: filters: fill in ga:pagePath=~^/posts/.*/$;ga:pagePath!@=. Among them, ; means using logical AND to concatenate two rules. If the site.baseurl is specified, change the first filtering rule to ga:pagePath=~^/BASE_URL/posts/.*/$, where BASE_URL is the value of site.baseurl. After Run Query, copy the generated contents of API Query URI at the bottom of the page and fill in the Encoded URI for the query of SuperProxy on GAE.After the query is saved on GAE, a Public Endpoint (public access address) will be generated, and we will get the query result in JSON format when accessing it. Finally, click Enable Endpoint in Public Request Endpoint to make the query effective, and click Start Scheduling in Scheduling to start the scheduled task.Configure Chirpy to Display Page ViewOnce all the hard part is done, it is very easy to enable the Page View on Chirpy theme. Your superProxy dashboard should look something like below and you can grab the required values.Update the _config.yml file of Chirpy project with the values from your dashboard, to look similar to the following:google_analytics: id: 'G-V6XXXXXXX' # fill in your Google Analytics ID pv: proxy_endpoint: 'https://PROJECT_ID.REGION_ID.r.appspot.com/query?id=&lt;ID FROM SUPER PROXY&gt;' cache_path: # the local PV cache data, friendly to visitors from GFW regionNow, you should see the Page View enabled on your blog.Reference Google Analytics Core Reporting API: Filters &#8617; " }, { "title": "Customize the Favicon", "url": "/posts/customize-the-favicon/", "categories": "Blogging, Tutorial", "tags": "favicon", "date": "2019-08-11 00:34:00 +0800", "snippet": "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may want to replace them with your own. The following sections will guide you to create and replace the default favicons.Generate the faviconPrepare a square image (PNG, JPG, or SVG) with a size of 512x512 or more, and then go to the online tool Real Favicon Generator and click the button Select your Favicon image to upload your image file.In the next step, the webpage will show all usage scenarios. You can keep the default options, scroll to the bottom of the page, and click the button Generate your Favicons and HTML code to generate the favicon.Download &amp; ReplaceDownload the generated package, unzip and delete the following two from the extracted files: browserconfig.xml site.webmanifestAnd then copy the remaining image files (.PNG and .ICO) to cover the original files in the directory assets/img/favicons/ of your Jekyll site. If your Jekyll site doesn’t have this directory yet, just create one.The following table will help you understand the changes to the favicon files: File(s) From Online Tool From Chirpy *.PNG ✓ ✗ *.ICO ✓ ✗ ✓ means keep, ✗ means delete.The next time you build the site, the favicon will be replaced with a customized edition." }, { "title": "Getting Started", "url": "/posts/getting-started/", "categories": "Blogging, Tutorial", "tags": "getting started", "date": "2019-08-09 20:55:00 +0800", "snippet": "PrerequisitesFollow the instructions in the Jekyll Docs to complete the installation of Ruby, RubyGems, Jekyll, and Bundler. In addition, Git is also required to be installed.InstallationCreating a New SiteThere are two ways to create a new repository for this theme: Using the Chirpy Starter - Easy to upgrade, isolates irrelevant project files so you can focus on writing. Forking on GitHub - Convenient for custom development, but difficult to upgrade. Unless you are familiar with Jekyll and are determined to tweak or contribute to this project, this approach is not recommended.Option 1. Using the Chirpy StarterCreate a new repository from the Chirpy Starter and name it &lt;GH_USERNAME&gt;.github.io, where GH_USERNAME represents your GitHub username.Option 2. Forking on GitHubFork Chirpy on GitHub and rename it to &lt;GH_USERNAME&gt;.github.io. Please note that the default branch code is in development. If you want the site to be stable, please switch to the latest tag and start writing.And then execute:$ bash tools/init.sh If you don’t want to deploy your site on GitHub Pages, append option --no-gh at the end of the above command.The above command will: Removes some files or directories from your repository: .travis.yml files under _posts If the option --no-gh is provided, the directory .github will be deleted. Otherwise, set up the GitHub Action workflow by removing the extension .hook of .github/workflows/pages-deploy.yml.hook, and then remove the other files and directories in the folder .github. Removes item Gemfile.lock from .gitignore. Creates a new commit to save the changes automatically.Installing DependenciesBefore running for the first time, go to the root directory of your site, and install dependencies as follows:$ bundleUsageConfigurationUpdate the variables of _config.yml as needed. Some of them are typical options: url avatar timezone langCustomizing StylesheetIf you need to customize the stylesheet, copy the theme’s assets/css/style.scss to the same path on your Jekyll site, and then add the custom style at the end of the style file.Starting from v4.1.0, if you want to overwrite the SASS variables defined in _sass/addon/variables.scss, create a new file _sass/variables-hook.scss and assign new values to the target variable in it.Customing Static AssetsStatic assets configuration was introduced in version 5.1.0. The CDN of the static assets is defined by file _data/assets/cross_origin.yml, and you can replace some of them according to the network conditions in the region where your website is published.Also, if you’d like to self-host the static assets, please refer to the chirpy-static-assets.Running Local ServerYou may want to preview the site contents before publishing, so just run it by:$ bundle exec jekyll sOr run the site on Docker with the following command:$ docker run -it --rm \\ --volume=\"$PWD:/srv/jekyll\" \\ -p 4000:4000 jekyll/jekyll \\ jekyll serveAfter a while, the local service will be published at http://127.0.0.1:4000.DeploymentBefore the deployment begins, check out the file _config.yml and make sure the url is configured correctly. Furthermore, if you prefer the project site and don’t use a custom domain, or you want to visit your website with a base URL on a web server other than GitHub Pages, remember to change the baseurl to your project name that starts with a slash, e.g, /project-name.Now you can choose ONE of the following methods to deploy your Jekyll site.Deploy by Using GitHub ActionsEnsure your Jekyll site has the file .github/workflows/pages-deploy.yml. Otherwise, create a new one and fill in the contents of the sample file, and the value of the on.push.branches should be the same as your repo’s default branch name. And then rename your repository to &lt;GH_USERNAME&gt;.github.io on GitHub.Now publish your Jekyll site: Browse to your repository on GitHub. Select the tab Settings, then click Pages in the left navigation bar. Then, in the Source section (under Build and deployment), select GitHub Actions from the dropdown menu. Push any commit to remote to trigger the GitHub Actions workflow. In the Actions tab of your repository, you should see the “Deploy Jekyll with GitHub Pages” workflow with at least one job running. Once the build is complete and successful, the site should be deployed automatically. Visit your website at the address indicated by GitHub. Manually Build and DeployOn self-hosted servers, you cannot enjoy the convenience of GitHub Actions. Therefore, you should build the site on your local machine and then upload the site files to the server.Go to the root of the source project, and build your site as follows:$ JEKYLL_ENV=production bundle exec jekyll bOr build the site on Docker:$ docker run -it --rm \\ --env JEKYLL_ENV=production \\ --volume=\"$PWD:/srv/jekyll\" \\ jekyll/jekyll \\ jekyll buildUnless you specified the output path, the generated site files will be placed in folder _site of the project’s root directory. Now you should upload those files to the target server.UpgradingIt depends on how you use the theme: If you are using the theme gem (there will be gem \"jekyll-theme-chirpy\" in the Gemfile), editing the Gemfile and update the version number of the theme gem, for example: - gem \"jekyll-theme-chirpy\", \"~&gt; 3.2\", \"&gt;= 3.2.1\"+ gem \"jekyll-theme-chirpy\", \"~&gt; 3.3\", \"&gt;= 3.3.0\" And then execute the following command: $ bundle update jekyll-theme-chirpy As the version upgrades, the critical files (for details, see the Startup Template) and configuration options will change. Please refer to the Upgrade Guide to keep your repo’s files in sync with the latest version of the theme. If you forked from the source project (there will be gemspec in the Gemfile of your site), then merge the latest upstream tags into your Jekyll site to complete the upgrade.The merge is likely to conflict with your local modifications. Please be patient and careful to resolve these conflicts. " }, { "title": "Writing a New Post", "url": "/posts/write-a-new-post/", "categories": "Blogging, Tutorial", "tags": "writing", "date": "2019-08-08 14:10:00 +0800", "snippet": "This post will guide you how to write a post on Chirpy theme. Even if you have previous experience with Jekyll, this article is worth reading, because many features require specific variables to be set.Naming and PathCreate a new file named YYYY-MM-DD-TITLE.EXTENSION and put it in the _posts of the root directory. Please note that the EXTENSION must be one of md and markdown. If you want to save time of creating files, please consider using the plugin Jekyll-Compose to accomplish this.Front MatterBasically, you need to fill the Front Matter as below at the top of the post:---title: TITLEdate: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG] # TAG names should always be lowercase--- The posts’ layout has been set to post by default, so there is no need to add the variable layout in the Front Matter block.Timezone of DateIn order to accurately record the release date of a post, you should not only set up the timezone of _config.yml but also provide the post’s timezone in variable date of its Front Matter block. Format: +/-TTTT, e.g. +0800.Categories and TagsThe categories of each post are designed to contain up to two elements, and the number of elements in tags can be zero to infinity. For instance:---categories: [Animal, Insect]tags: [bee]---Author InformationThe author information of the post usually does not need to be filled in the Front Matter , they will be obtained from variables social.name and the first entry of social.links of the configuration file by default. But you can also override it as follows:Adding author information in _data/authors.yml (If your website doesn’t have this file, don’t hesitate to create one).&lt;author_id&gt;: name: &lt;full name&gt; twitter: &lt;twitter_of_author&gt; url: &lt;homepage_of_author&gt;And then use author to specify a single entry or authors to specify multiple entries:---author: &lt;author_id&gt; # for single entry# orauthors: [&lt;author1_id&gt;, &lt;author2_id&gt;] # for multiple entries---Having said that, the key author can also identify multiple entries. The benefit of reading the author information from the file _data/authors.yml is that the page will have the meta tag twitter:creator, which enriches the Twitter Cards and is good for SEO.Table of ContentsBy default, the Table of Contents (TOC) is displayed on the right panel of the post. If you want to turn it off globally, go to _config.yml and set the value of variable toc to false. If you want to turn off TOC for a specific post, add the following to the post’s Front Matter:---toc: false---CommentsThe global switch of comments is defined by variable comments.active in the file _config.yml. After selecting a comment system for this variable, comments will be turned on for all posts.If you want to close the comment for a specific post, add the following to the Front Matter of the post:---comments: false---MathematicsFor website performance reasons, the mathematical feature won’t be loaded by default. But it can be enabled by:---math: true---MermaidMermaid is a great diagrams generation tool. To enable it on your post, add the following to the YAML block:---mermaid: true---Then you can use it like other markdown languages: surround the graph code with ```mermaid and ```.ImagesCaptionAdd italics to the next line of an image，then it will become the caption and appear at the bottom of the image:![img-description](/path/to/image)_Image Caption_SizeIn order to prevent the page content layout from shifting when the image is loaded, we should set the width and height for each image:![Desktop View](/assets/img/sample/mockup.png){: width=\"700\" height=\"400\" }Starting from Chirpy v5.0.0, height and width support abbreviations (height → h, width → w). The following example has the same effect as the above:![Desktop View](/assets/img/sample/mockup.png){: w=\"700\" h=\"400\" }PositionBy default, the image is centered, but you can specify the position by using one of the classes normal, left, and right. Once the position is specified, the image caption should not be added. Normal position Image will be left aligned in below sample: ![Desktop View](/assets/img/sample/mockup.png){: .normal } Float to the left ![Desktop View](/assets/img/sample/mockup.png){: .left } Float to the right ![Desktop View](/assets/img/sample/mockup.png){: .right } ShadowThe screenshots of the program window can be considered to show the shadow effect, and the shadow will be visible in the light mode:![Desktop View](/assets/img/sample/mockup.png){: .shadow }CDN URLIf you host the images on the CDN, you can save the time of repeatedly writing the CDN URL by assigning the variable img_cdn of _config.yml file:img_cdn: https://cdn.comOnce img_cdn is assigned, the CDN URL will be added to the path of all images (images of site avatar and posts) starting with /.For instance, when using images:![The flower](/path/to/flower.png)The parsing result will automatically add the CDN prefix https://cdn.com before the image path:&lt;img src=\"https://cdn.com/path/to/flower.png\" alt=\"The flower\"&gt;Image PathWhen a post contains many images, it will be a time-consuming task to repeatedly define the path of the images. To solve this, we can define this path in the YAML block of the post:---img_path: /img/path/---And then, the image source of Markdown can write the file name directly:![The flower](flower.png)The output will be:&lt;img src=\"/img/path/flower.png\" alt=\"The flower\"&gt;Preview ImageIf you want to add an image to the top of the post contents, specify the attribute path, width, height, and alt for the image:---image: path: /path/to/image/file width: 1000 # in pixels height: 400 # in pixels alt: image alternative text---Except for alt, all other options are necessary, especially the width and height, which are related to user experience and web page loading performance. The above section “Size” also mentions this.Starting from Chirpy v5.0.0, the attributes height and width can be abbreviated: height → h, width → w. In addition, the img_path can also be passed to the preview image, that is, when it has been set, the attribute path only needs the image file name.Starting from Chirpy v5.2.0, the property for the preview image is changed to image.path. If upgrading the theme from a prior version, you will have to update posts’ metadata to use new image property.Pinned PostsYou can pin one or more posts to the top of the home page, and the fixed posts are sorted in reverse order according to their release date. Enable by:---pin: true---PromptsThere are several types of prompts: tip, info, warning, and danger. They can be generated by adding the class prompt-{type} to the blockquote. For example, define a prompt of type info as follows:&gt; Example line for prompt.{: .prompt-info }SyntaxInline Code`inline code part`Filepath Hightlight`/path/to/a/file.extend`{: .filepath}Code BlockMarkdown symbols ``` can easily create a code block as follows:```This is a plaintext code snippet.```Specifying LanguageUsing ```{language} you will get a code block with syntax highlight:```yamlkey: value``` The Jekyll tag {% highlight %} is not compatible with this theme.Line NumberBy default, all languages except plaintext, console, and terminal will display line numbers. When you want to hide the line number of a code block, add the class nolineno to it:```shellecho 'No more line numbers!'```{: .nolineno }Specifying the FilenameYou may have noticed that the code language will be displayed at the top of the code block. If you want to replace it with the file name, you can add the attribute file to achieve this:```shell# content```{: file=\"path/to/file\" }Liquid CodesIf you want to display the Liquid snippet, surround the liquid code with {% raw %} and {% endraw %}:{% raw %}```liquid{% if product.title contains 'Pack' %} This product's title contains the word Pack.{% endif %}```{% endraw %}Or adding render_with_liquid: false (Requires Jekyll 4.0 or higher) to the post’s YAML block.Learn MoreFor more knowledge about Jekyll posts, visit the Jekyll Docs: Posts." }, { "title": "Text and Typography", "url": "/posts/text-and-typography/", "categories": "Blogging, Demo", "tags": "typography", "date": "2019-08-08 11:33:00 +0800", "snippet": "This post is to show Markdown syntax rendering on Chirpy, you can also use it as an example of writing. Now, let’s start looking at text and typography.TitlesH1 - headingH2 - headingH3 - headingH4 - headingParagraphI wandered lonely as a cloudThat floats on high o’er vales and hills,When all at once I saw a crowd,A host, of golden daffodils;Beside the lake, beneath the trees,Fluttering and dancing in the breeze.ListsOrdered list Firstly Secondly ThirdlyUnordered list Chapter Section Paragraph Task list TODO Completed Defeat COVID-19 Vaccine production Economic recovery People smile again Description list Sun the star around which the earth orbits Moon the natural satellite of the earth, visible by reflected light from the sunBlock Quote This line shows the block quote.Prompts An example showing the tip type prompt. An example showing the info type prompt. An example showing the warning type prompt. An example showing the danger type prompt.Tables Company Contact Country Alfreds Futterkiste Maria Anders Germany Island Trading Helen Bennett UK Magazzini Alimentari Riuniti Giovanni Rovelli Italy Linkshttp://127.0.0.1:4000FootnoteClick the hook will locate the footnote1, and here is another footnote2.Images Default (with caption)Full screen width and center alignment Shadowshadow effect (visible in light mode) Left aligned Float to left “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.” Float to right “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.” Mermaid SVG gantt title Adding GANTT diagram functionality to mermaid apple :a, 2017-07-20, 1w banana :crit, b, 2017-07-23, 1d cherry :active, c, after b a, 1dMathematicsThe mathematics powered by MathJax:\\[\\sum_{n=1}^\\infty 1/n^2 = \\frac{\\pi^2}{6}\\]When $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are\\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\]Inline codeThis is an example of Inline Code.FilepathHere is the /path/to/the/file.extend.Code blockCommonThis is a common code snippet, without syntax highlight and line number.Specific LanguagesConsole$ env |grep SHELLSHELL=/usr/local/bin/bashPYENV_SHELL=bashShellif [ $? -ne 0 ]; then echo \"The command was not successful.\"; #do the needful / exitfi;Specific filename@import \"colors/light-typography\", \"colors/dark-typography\"Reverse Footnote The footnote source &#8617; The 2nd footnote source &#8617; " } ]
